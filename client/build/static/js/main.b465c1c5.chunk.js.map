{"version":3,"sources":["utils/auth.js","components/Header/index.js","components/Footer/index.js","components/ThoughtList/index.js","components/FriendList/index.js","utils/mutations.js","utils/queries.js","components/ThoughtForm/index.js","pages/Home.js","pages/Login.js","pages/NoMatch.js","components/ReactionList/index.js","pages/SingleThought.js","pages/Profile.js","pages/Signup.js","App.js","reportWebVitals.js","index.js"],"names":["decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","Header","className","to","Auth","loggedIn","href","onClick","event","preventDefault","logout","Footer","getFullYear","ThoughtList","thoughts","title","length","map","thought","key","_id","username","style","fontWeight","createdAt","thoughtText","reactionCount","FriendList","friendCount","friends","friend","LOGIN_USER","gql","ADD_USER","ADD_THOUGHT","ADD_FRIEND","QUERY_THOUGHTS","QUERY_THOUGHT","QUERY_USER","QUERY_ME","QUERY_ME_BASIC","ThoughtForm","useState","setText","characterCount","setCharacterCount","useMutation","update","cache","addThought","data","readQuery","query","writeQuery","e","console","error","me","handleFormSubmit","a","variables","onSubmit","placeholder","value","onChange","target","type","Home","useQuery","loading","userData","Login","props","email","password","formState","setFormState","login","handleChange","name","id","NoMatch","ReactionList","reactions","reaction","reactionBody","SingleThought","thoughtId","useParams","Profile","userParam","addFriend","user","getProfile","handleClick","Signup","addUser","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","InMemoryCache","App","ApolloProvider","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b465c1c5.chunk.js","sourcesContent":["import decode from 'jwt-decode';\n\n// authservice: we instantiate a new version of for every component that imports it\n// ensures we are using a new version of the functionality and takes some of the risk out of leaving remnant data hanging around.\nclass AuthService {\n    // retrieve data saved in token\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n    // check if the user is still logged in\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n        // use type coersion to check if token is NOT undefined and the token is NOT expired\n    return !!token && !this.isTokenExpired(token);\n  }\n\n    // check if the token has expired\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  // retrieve token from localStorage\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n    // set token to localStorage and reload page to homepage\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n\n    window.location.assign('/');\n  }\n\n    // clear token from localStorage and force logout with reload\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport Auth from '../../utils/auth';\n// import auth file \n\nconst Header = () => {\n  // executes when clicked to run the .logout() method we created in the AuthService class\n  const logout = event => {\n    event.preventDefault();\n    Auth.logout();\n  };\n// execute the .logout() method, which will remove the token from localStorage and then refresh the application by taking the user back to the homepage.\n\n// return different navigation items depending on the outcome of the Auth.loggedIn().\n//  If it returns true, and we're logged in, we want to display navigation items tailored to the user.\n// If it returns false, we'll display the default items for logging in and signing up.\n  return (\n    <header className=\"bg-secondary mb-4 py-2 flex-row align-center\">\n      <div className=\"container flex-row justify-space-between-lg justify-center align-center\">\n        <Link to=\"/\">\n          <h1>Deep Thoughts</h1>\n        </Link>\n\n        <nav className=\"text-center\">\n          {Auth.loggedIn() ? (\n            <>\n              <Link to=\"/profile\">Me</Link>\n              <a href=\"/\" onClick={logout}>\n                Logout\n              </a>\n            </>\n          ) : (\n            <>\n              <Link to=\"/login\">Login</Link>\n              <Link to=\"/signup\">Signup</Link>\n            </>\n          )}\n        </nav>\n      </div>\n    </header>\n  );\n};\n\nexport default Header;\n","import React from 'react';\n\nconst Footer = () => {\n  return (\n    <footer className=\"w-100 mt-auto bg-secondary p-4\">\n      <div className=\"container\">\n        &copy;{new Date().getFullYear()} by Ibrahim\n      </div>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\n// Here we instruct that the ThoughtList component will receive two props: a title and the thoughts array. \n// We destructure the argument data to avoid using props.title and props.thoughts throughout the JSX code.\nconst ThoughtList = ({ thoughts, title }) => {\n  if (!thoughts.length) {\n    return <h3>No Thoughts Yet</h3>;\n  }\n\n  // We conditionally render JSX by checking to see if there's even any data in the thoughts array first.\n  // If there's no data, then we return a message stating that. \n  //If there is data, then we return a list of thoughts using the .map() method.\n  \n\n  // Link tags: In both instances, we've added an extra path to the end of the Link component. For example, /profile/${thought.username} would become /profile/Zoe66 for that particular user.\n  return (\n    <div>\n      <h3>{title}</h3>\n      {thoughts &&\n        thoughts.map(thought => (\n          <div key={thought._id} className=\"card mb-3\">\n            <p className=\"card-header\">\n              <Link\n                to={`/profile/${thought.username}`}\n                style={{ fontWeight: 700 }}\n                className=\"text-light\"\n              >\n                {thought.username}\n              </Link>{' '}\n              thought on {thought.createdAt}\n            </p>\n            <div className=\"card-body\">\n              <Link to={`/thought/${thought._id}`}>\n                <p>{thought.thoughtText}</p>\n                <p className=\"mb-0\">\n                  Reactions: {thought.reactionCount} || Click to{' '}\n                  {thought.reactionCount ? 'see' : 'start'} the discussion!\n                </p>\n              </Link>\n            </div>\n          </div>\n        ))}\n    </div>\n  );\n};\n\n// Notice how we also check to see the value of thought.reactionCount. \n// We're conditionally displaying a message to contextualize what the call to action should be. If there are no reactions, the user will start the discussion by adding the first reaction. \n// If there are reactions, the user will view or add their own reaction to an existing list.\n\nexport default ThoughtList;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\n\n// We plan on passing three props to the FriendList component: \n// the username whose friends these belong to, \n// the friend count, and the actual array of friends.\n// With this data, we can display a different message if the user has no friends. \n// Otherwise, we can map the friends into elements that link to their profiles.\nconst FriendList = ({ friendCount, username, friends }) => {\n  if (!friends || !friends.length) {\n    return <p className=\"bg-dark text-light p-3\">{username}, make some friends!</p>;\n  }\n\n  return (\n    <div>\n      <h5>\n        {username}'s {friendCount} {friendCount === 1 ? 'friend' : 'friends'}\n      </h5>\n      {friends.map(friend => (\n        <button className=\"btn w-100 display-block mb-2\" key={friend._id}>\n          <Link to={`/profile/${friend.username}`}>{friend.username}</Link>\n        </button>\n      ))}\n    </div>\n  );\n};\n\nexport default FriendList;\n","import { gql } from '@apollo/client';\n// we import the gql tagged template literal functionality to create a GraphQL mutation called login\n\n// This will accept two variables, $email and $password, whose values we'll set up to be passed in as arguments when we integrate this with the login form page.\n\n// In return, we expect the logged-in user's data and the token. With this token, we'll be able to perform other actions unique to the logged-in user.\n\nexport const LOGIN_USER = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n      }\n    }\n  }\n`;\n\n// create the mutation for creating a new user through the signup form page\n// same as top just asking for an email\nexport const ADD_USER = gql`\n  mutation addUser($username: String!, $email: String!, $password: String!) {\n    addUser(username: $username, email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n      }\n    }\n  }\n`;\n\nexport const ADD_THOUGHT = gql`\n  mutation addThought($thoughtText: String!) {\n    addThought(thoughtText: $thoughtText) {\n      _id\n      thoughtText\n      createdAt\n      username\n      reactionCount\n      reactions {\n        _id\n      }\n    }\n  }\n`;\n\nexport const ADD_REACTION = gql`\n  mutation addReaction($thoughtId: ID!, $reactionBody: String!) {\n    addReaction(thoughtId: $thoughtId, reactionBody: $reactionBody) {\n      _id\n      reactionCount\n      reactions {\n        _id\n        reactionBody\n        createdAt\n        username\n      }\n    }\n  }\n`;\n\nexport const ADD_FRIEND = gql`\n  mutation addFriend($id: ID!) {\n    addFriend(friendId: $id) {\n      _id\n      username\n      friendCount\n      friends {\n        _id\n        username\n      }\n    }\n  }\n`;\n\nexport const REMOVE_FRIEND = gql`\n  mutation removeFriend($id: ID!) {\n    removeFriend(id: $id) {\n      _id\n      username\n      friends {\n        _id\n        username\n      }\n    }\n  }\n`;\n","//utils; This folder will serve as a location to hold code and functionality that isn't necessarily React-based.\n\n\n// We've used similar syntax from the test query we wrote using the GraphQL Playground earlier. \n//Now we've wrapped the entire query code in a tagged template literal using the imported gql function. \n// We've also saved it as QUERY_THOUGHTS and exported it using the ES6 module export syntax.\n\n// we can import this function anywhere we need throughout the frontend \nimport { gql } from '@apollo/client';\n\nexport const QUERY_THOUGHTS = gql`\n  query thoughts($username: String) {\n    thoughts(username: $username) {\n      _id\n      thoughtText\n      createdAt\n      username\n      reactionCount\n      reactions {\n        _id\n        createdAt\n        username\n        reactionBody\n      }\n    }\n  }\n`;\n\nexport const QUERY_THOUGHT = gql`\n  query thought($id: ID!) {\n    thought(_id: $id) {\n      _id\n      thoughtText\n      createdAt\n      username\n      reactionCount\n      reactions {\n        _id\n        createdAt\n        username\n        reactionBody\n      }\n    }\n  }\n`;\n\nexport const QUERY_USER = gql`\n  query user($username: String!) {\n    user(username: $username) {\n      _id\n      username\n      email\n      friendCount\n      friends {\n        _id\n        username\n      }\n      thoughts {\n        _id\n        thoughtText\n        createdAt\n        reactionCount\n      }\n    }\n  }\n`;\n\n// With this query, we're going to retrieve essentially all data related to the logged-in user. \n// We'll retrieve their user information, thoughts, reactions to those thoughts, and friend list\n// great for users personal profile page \nexport const QUERY_ME = gql`\n  {\n    me {\n      _id\n      username\n      email\n      friendCount\n      thoughts {\n        _id\n        thoughtText\n        createdAt\n        reactionCount\n        reactions {\n          _id\n          createdAt\n          reactionBody\n          username\n        }\n      }\n      friends {\n        _id\n        username\n      }\n    }\n  }\n`;\n\n// query for homepage data\n// \nexport const QUERY_ME_BASIC = gql`\n  {\n    me {\n      _id\n      username\n      email\n      friendCount\n      friends {\n        _id\n        username\n      }\n    }\n  }\n`;\n","import React, { useState } from 'react';\n\nimport { useMutation } from '@apollo/client';\nimport { ADD_THOUGHT } from '../../utils/mutations';\nimport { QUERY_THOUGHTS, QUERY_ME } from '../../utils/queries';\n// profile page relies on query_me to populate thoughts \n\n\nconst ThoughtForm = () => {\n  const [thoughtText, setText] = useState('');\n  const [characterCount, setCharacterCount] = useState(0);\n\n  // the addThought() function will run the actual mutation. \n  //The error variable will initially be undefined but can change depending on if the mutation failed.\n  const [addThought, { error }] = useMutation(ADD_THOUGHT, {\n      // In the update() function, addThought represents the new thought that was just created.\n      // Using the cache object, we can read what's currently saved in the QUERY_THOUGHTS cache and then update it with writeQuery() to include the new thought object.\n    update(cache, { data: { addThought } }) {\n      try {\n        // update thought array's cache\n        // could potentially not exist yet, so wrap in a try/catch\n        const { thoughts } = cache.readQuery({ query: QUERY_THOUGHTS });\n            // ^read what's currently in the cache\n\n        // prepend the newest thought to the front of the array\n        cache.writeQuery({\n          query: QUERY_THOUGHTS,\n          data: { thoughts: [addThought, ...thoughts] },\n        });\n      } catch (e) {\n        console.error(e);\n      }\n\n    // update me object's cache\n    // appending new thought to the end of the array\n    const { me } = cache.readQuery({ query: QUERY_ME });\n      cache.writeQuery({\n        query: QUERY_ME,\n        data: { me: { ...me, thoughts: [...me.thoughts, addThought] } },\n      });\n    },\n  });\n\n  // update state based on form input changes\n  const handleChange = (event) => {\n    if (event.target.value.length <= 280) {\n      setText(event.target.value);\n      setCharacterCount(event.target.value.length);\n    }\n  };\n\n  // submit form\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    try {\n            // add thought to database\n      await addThought({\n        variables: { thoughtText },\n      });\n\n      // clear form value\n      setText('');\n      setCharacterCount(0);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  // 64-65 once you reach 280 characters, the text will turn red/something went wrong if nothing typed\n  return (\n    <div>\n      <p\n        className={`m-0 ${characterCount === 280 || error ? 'text-error' : ''}`}\n      >\n        Character Count: {characterCount}/280\n        {error && <span className=\"ml-2\">Something went wrong...</span>}\n      </p>\n      <form\n        className=\"flex-row justify-center justify-space-between-md align-stretch\"\n        onSubmit={handleFormSubmit}\n      >\n        <textarea\n          placeholder=\"Here's a new thought...\"\n          value={thoughtText}\n          className=\"form-input col-12 col-md-9\"\n          onChange={handleChange}\n        ></textarea>\n        <button className=\"btn col-12 col-md-3\" type=\"submit\">\n          Submit\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default ThoughtForm;\n","import React from 'react';\nimport ThoughtList from '../components/ThoughtList';\nimport FriendList from '../components/FriendList';\nimport ThoughtForm from '../components/ThoughtForm';\n\n\n\nimport Auth from '../utils/auth';\n// check for logged in status of user\nimport { useQuery } from '@apollo/client';\n// importing the useQuery Hook from Apollo Client. \n// This will allow us to make requests to the GraphQL server we connected to and made available to the application using the <ApolloProvider> component in App.js.\nimport { QUERY_THOUGHTS, QUERY_ME_BASIC } from '../utils/queries';\n// import queries from utils folder\n\n\n// When we load the Home component in the application, we'll execute the query for the thought data.\nconst Home = () => {\n  // use useQuery hook to make query request\n  const { loading, data } = useQuery(QUERY_THOUGHTS);\n  //  Because this is asynchronous, just like using fetch(), apollo/client library provides a loading property to indicate that the request isn't done just yet. \n  // When it's finished and we have data returned from the server, that information is stored in the destructured data property.\n\n  // with the loading property, we'll be able to conditionally render data based on whether or not there is data to even display.\n\n  // use object destructuring to extract `data` from the `useQuery` Hook's response and rename it `userData` to be more descriptive\n  const { data: userData } = useQuery(QUERY_ME_BASIC);\n  // when the component function runs, we execute the QUERY_ME_BASIC query to retrieve the logged-in user's friend list to be printed.\n\n  // get the thought data out of the query's response\n  // response comes in big data object so use . to access data\nconst thoughts = data?.thoughts || [];\n// optional chaining (new to js)\n// we're saying is, if data exists, store it in the thoughts constant we just created. If data is undefined, then save an empty array to the thoughts component.\n \nconst loggedIn = Auth.loggedIn();\n// If you're logged in, the loggedIn variable will be true; otherwise, it will be false\n\n//(38-48) With this in place, we're conditionally defining the layout for this <div>. If the user isn't logged in, it'll span the full width of the row. But if you the user is logged in, it'll only span eight columns, leaving space for a four-column <div> on the righthand side.\n\n// 44-48 conditionally render thoughtform\nreturn (\n  <main>\n    <div className=\"flex-row justify-space-between\">\n      {loggedIn && (\n        <div className=\"col-12 mb-3\">\n          <ThoughtForm />\n        </div>\n      )}\n      <div className={`col-12 mb-3 ${loggedIn && 'col-lg-8'}`}>\n        {loading ? (\n          <div>Loading...</div>\n        ) : (\n          <ThoughtList\n            thoughts={thoughts}\n            title=\"Some Feed for Thought(s)...\"\n          />\n        )}\n      </div>\n      {loggedIn && userData ? (\n        <div className=\"col-12 col-lg-3 mb-3\">\n          <FriendList\n            username={userData.me.username}\n            friendCount={userData.me.friendCount}\n            friends={userData.me.friends}\n          />\n        </div>\n      ) : null}\n    </div>\n  </main>\n);\n};\n// (51-59): Now if the value of loggedIn is true and there is data in the userData variable we created from the useQuery() Hook, we'll render a righthand column <div> that holds our <FriendList> component!\n\n\n// ^With this, we use a ternary operator to conditionally render the <ThoughtList> component. \n\n// If the query hasn't completed and loading is still defined, we display a message to indicate just that.\n\n//  Once the query is complete and loading is undefined, we pass the thoughts array and a custom title to the <ThoughtList> component as props.\n  \n\nexport default Home;\n","import React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { LOGIN_USER } from '../utils/mutations';\n// have to initialize our LOGIN_USER mutation with the useMutation() Hook\n\nimport Auth from '../utils/auth';\n\nconst Login = (props) => {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [login, { error }] = useMutation(LOGIN_USER);\n\n  // update state based on form input changes\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  // submit form\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    try {\n      const { data } = await login({\n        variables: { ...formState },\n      });\n\n     //  take the token and set it to localStorage.\n      Auth.login(data.login.token);\n    } catch (e) {\n      console.error(e);\n    }\n\n    // clear form values\n    setFormState({\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <main className=\"flex-row justify-center mb-4\">\n      <div className=\"col-12 col-md-6\">\n        <div className=\"card\">\n          <h4 className=\"card-header\">Login</h4>\n          <div className=\"card-body\">\n            <form onSubmit={handleFormSubmit}>\n              <input\n                className=\"form-input\"\n                placeholder=\"Your email\"\n                name=\"email\"\n                type=\"email\"\n                id=\"email\"\n                value={formState.email}\n                onChange={handleChange}\n              />\n              <input\n                className=\"form-input\"\n                placeholder=\"******\"\n                name=\"password\"\n                type=\"password\"\n                id=\"password\"\n                value={formState.password}\n                onChange={handleChange}\n              />\n              <button className=\"btn d-block w-100\" type=\"submit\">\n                Submit\n              </button>\n            </form>\n\n            {error && <div>Login failed</div>}\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n\nexport default Login;\n","import React from 'react';\n\nconst NoMatch = () => {\n  return (\n    <div>\n      Oops, we couldn't find that page.\n    </div>\n  );\n};\n\nexport default NoMatch;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\n\n// The ReactionList component will be given the reactions array as a prop. \n// This array can then be mapped into a list of <p> elements. \n// Each reaction also includes the author's name, which should route to the Profile page when clicked. \n// Thus, we'll need to import the Link component.\n\nconst ReactionList = ({ reactions }) => {\n  return (\n    <div className=\"card mb-3\">\n      <div className=\"card-header\">\n        <span className=\"text-light\">Reactions</span>\n      </div>\n      <div className=\"card-body\">\n        {reactions &&\n          reactions.map(reaction => (\n            <p className=\"pill mb-3\" key={reaction._id}>\n              {reaction.reactionBody} //{' '}\n              <Link to={`/profile/${reaction.username}`} style={{ fontWeight: 700 }}>\n                {reaction.username} on {reaction.createdAt}\n              </Link>\n            </p>\n          ))}\n      </div>\n    </div>\n  );\n};\n\nexport default ReactionList;","import React from 'react';\nimport { useParams } from 'react-router-dom';\n// to get info on the thought id \n\nimport ReactionList from '../components/ReactionList';\n// reaction component\n\nimport { useQuery } from '@apollo/client';\nimport { QUERY_THOUGHT } from '../utils/queries';\n// import queries.js/ apolloclient\n\nconst SingleThought = (props) => {\n  const { id: thoughtId } = useParams();\n  // Notice how the URL includes the ID of the thought being viewed.(in single thought component)\n  // We can grab that ID and query the database for the thought's full information.\n\n  const { loading, data } = useQuery(QUERY_THOUGHT, {\n    // the variables loading and data are destructured from the useQuery Hook\n\n    // the loading variable is then used to briefly show a loading <div> element, and the data variable is used to populate a thought object.\n    variables: { id: thoughtId },\n  });\n  // The useQuery Hook was given a second argument in the form of an object.\n  // This is how you can pass variables to queries that need them.\n  // The id property on the variables object will become the $id parameter in the GraphQL query.\n\n  const thought = data?.thought || {};\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div>\n      <div className=\"card mb-3\">\n        <p className=\"card-header\">\n          <span style={{ fontWeight: 700 }} className=\"text-light\">\n            {thought.username}\n          </span>{' '}\n          thought on {thought.createdAt}\n        </p>\n        <div className=\"card-body\">\n          <p>{thought.thoughtText}</p>\n        </div>\n      </div>\n\n      {thought.reactionCount > 0 && (\n        <ReactionList reactions={thought.reactions} />\n      )}\n    </div>\n  );\n};\n\nexport default SingleThought;\n// The only new addition is adding the ReactionList component at the bottom, passing in the reactions array as a prop. \n// We combined this with a thought.reactionCount > 0 expression to prevent rendering the reactions if the array is empty.\n\n","import React from 'react';\nimport { Redirect, useParams } from 'react-router-dom';\n// Redirect will allow us to redirect the user to another route within the application.\n\nimport ThoughtForm from '../components/ThoughtForm';\nimport ThoughtList from '../components/ThoughtList';\nimport FriendList from '../components/FriendList';\n\nimport { useQuery, useMutation } from '@apollo/client';\nimport { QUERY_USER, QUERY_ME } from '../utils/queries';\n// profile page relies on query_me to populate thoughts \n\nimport { ADD_FRIEND } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nconst Profile = (props) => {\n  const { username: userParam } = useParams();\n\n// we need to destructure the mutation function from ADD_FRIEND so we can use it in a click function.\nconst [addFriend] = useMutation(ADD_FRIEND);\n  const { loading, data } = useQuery(userParam ? QUERY_USER : QUERY_ME, {\n    variables: { username: userParam },\n  });\n// check the value of our parameter and conditionally run a query based on the result\n// Now if there's a value in userParam that we got from the URL bar, we'll use that value to run the QUERY_USER query. If there's no value in userParam, like if we simply visit /profile as a logged-in user, we'll execute the QUERY_ME query instead.\n\n  const user = data?.me || data?.user || {};\n\n  // redirect to personal profile page if username is yours\n  if (Auth.loggedIn() && Auth.getProfile().data.username === userParam) {\n    return <Redirect to=\"/profile\" />;\n  }\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  // if there is no user data to display, we know that we aren't logged in or at another user's profile page. \n  // Instead of redirecting the user away, we simply inform them that they need to be logged in to see this page and they must log in or sign up to use it.\n  if (!user?.username) {\n    return (\n      <h4>\n        You need to be logged in to see this. Use the navigation links above to\n        sign up or log in!\n      </h4>\n    );\n  }\n\n  // callback function for button \n  const handleClick = async () => {\n    try {\n      await addFriend({\n        variables: { id: user._id },\n      });\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  // 44-46: adjust the messaging displayed to a user on their profile page\n  // if userParam doesn't exist, we'll get a message saying \"Viewing your profile.\" Otherwise, it will display the username of the other user on their profile.\n\n  // 61-69: include button element\n  // Note that the <button> element has an onClick attribute. We'll need to define the callback function that it references above \n\n  // 70-74: the userParam variable is only defined when the route includes a username (e.g., /profile/Marisa86). \n  // Thus, the button won't display when the route is simply /profile.\n  return (\n    <div>\n      <div className=\"flex-row mb-3\">\n        <h2 className=\"bg-dark text-secondary p-3 display-inline-block\">\n          Viewing {userParam ? `${user.username}'s` : 'your'} profile.\n        </h2>\n\n        {userParam && (\n          <button className=\"btn ml-auto\" onClick={handleClick}>\n            Add Friend\n          </button>\n        )}\n      </div>\n\n      <div className=\"flex-row justify-space-between mb-3\">\n        <div className=\"col-12 mb-3 col-lg-8\">\n          <ThoughtList\n            thoughts={user.thoughts}\n            title={`${user.username}'s thoughts...`}\n          />\n        </div>\n\n        <div className=\"col-12 col-lg-3 mb-3\">\n          <FriendList\n            username={user.username}\n            friendCount={user.friendCount}\n            friends={user.friends}\n          />\n        </div>\n      </div>\n      <div className=\"mb-3\">{!userParam && <ThoughtForm />}</div>\n    </div>\n  );\n};\nexport default Profile;\n\n// 96: make sure the form only displays on the user's own Profile page, not on other users' pages.","import React, { useState } from 'react';\n// we already have functionality for capturing form field data from a user and storing it in state using the useState() Hook \nimport { useMutation } from '@apollo/client';\n// useMutation() Hook creates and prepares a JavaScript function that wraps around our mutation code and returns it to us\n// ^^will return in the form of the addUser function \nimport { ADD_USER } from '../utils/mutations';\n\nimport Auth from '../utils/auth';\n// auth from utils folder to store token\n\nconst Signup = () => {\n  const [formState, setFormState] = useState({\n    username: '',\n    email: '',\n    password: '',\n  });\n  const [addUser, { error }] = useMutation(ADD_USER);\n\n  // update state based on form input changes\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  // submit form\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n  // use try/catch instead of promises to handle errors\n    try {\n  // execute addUser mutation and pass in variable data from form\n      const { data } = await addUser({\n        variables: { ...formState },\n      });\n\n      //  take the token and set it to localStorage.\n      Auth.login(data.addUser.token);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n// Now when you sign up successfully, you'll be redirected to the homepage with your token stored in localStorage\n\n  return (\n    <main className=\"flex-row justify-center mb-4\">\n      <div className=\"col-12 col-md-6\">\n        <div className=\"card\">\n          <h4 className=\"card-header\">Sign Up</h4>\n          <div className=\"card-body\">\n            <form onSubmit={handleFormSubmit}>\n              <input\n                className=\"form-input\"\n                placeholder=\"Your username\"\n                name=\"username\"\n                type=\"username\"\n                id=\"username\"\n                value={formState.username}\n                onChange={handleChange}\n              />\n              <input\n                className=\"form-input\"\n                placeholder=\"Your email\"\n                name=\"email\"\n                type=\"email\"\n                id=\"email\"\n                value={formState.email}\n                onChange={handleChange}\n              />\n              <input\n                className=\"form-input\"\n                placeholder=\"******\"\n                name=\"password\"\n                type=\"password\"\n                id=\"password\"\n                value={formState.password}\n                onChange={handleChange}\n              />\n              <button className=\"btn d-block w-100\" type=\"submit\">\n                Submit\n              </button>\n            </form>\n\n            {error && <div>Signup failed</div>}\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n\n// if there's an error, we'll see a <div> element with a message saying so.\nexport default Signup;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n// BrowserRouter and Route are components that the React Router library provides. \n// We renamed BrowserRouter to Router to make it easier to work with.\nimport {\n  ApolloClient,\n // is a constructor function that will help initialize the connection to the GraphQL API server.\n  InMemoryCache,\n  // enables the Apollo Client instance to cache API response data so that we can perform requests more efficiently.\n  ApolloProvider,\n  // is a special type of React component that we'll use to provide data to all of the other components.\n  createHttpLink,\n // allows us to control how the Apollo Client makes a request. Think of it like middleware for the outbound network requests.\n} from '@apollo/client';\n\n//r etrieve the token from localStorage and include it with each request to the API\nimport { setContext } from '@apollo/client/link/context';\n// With this function, setContext, we can create essentially a middleware function that will retrieve the token for us and combine it with the existing httpLink\n\n\nimport Header from './components/Header';\nimport Footer from './components/Footer';\n\nimport Home from './pages/Home';\nimport Login from './pages/Login';\nimport NoMatch from './pages/NoMatch';\nimport SingleThought from './pages/SingleThought';\nimport Profile from './pages/Profile';\nimport Signup from './pages/Signup';\n\n\n\n\nconst httpLink = createHttpLink({\n  // establish a new link to the graphql server\n  // URI stands for \"Uniform Resource Identifier.\"\n  uri: '/graphql',\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem('id_token');\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n// With authLink, we use the setContext() function to retrieve the token from localStorage and set the HTTP request headers of every request to include the token, whether the request needs it or not.\n// if request doesn't need it, server-side won't look for it\n\nconst client = new ApolloClient({\n  // combine the authLink and httpLink objects so that every request retrieves the token and sets the request headers before making the request to the API\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n  //instantiate a new cache object using newmemorycache\n});\n\n// Because we're passing the client variable in as the value for the client prop in the provider, \n// everything between the JSX tags will eventually have access to the server's API data through the client we set up.\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div className=\"flex-column justify-flex-start min-100-vh\">\n          <Header />\n          <div className=\"container\">\n            <Switch>\n              <Route exact path=\"/\" component={Home} />\n              <Route exact path=\"/login\" component={Login} />\n              <Route exact path=\"/signup\" component={Signup} />\n              <Route exact path=\"/profile/:username?\" component={Profile} />\n              <Route exact path=\"/thought/:id\" component={SingleThought} />\n\n              <Route component={NoMatch} />\n            </Switch>\n          </div>\n          <Footer />\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}